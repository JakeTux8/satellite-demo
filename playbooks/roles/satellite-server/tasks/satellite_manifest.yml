---
# vim: sw=2 ai expandtab

- include: satellite_helper_callsatellite.yml
  vars:
    call_name: subscription manifest list
    call_api: "/katello/api/organizations/{{ org_id }}/subscriptions"

- name: check if manifest is installed
  set_fact:
      manifest_installed: "{{ call_output.json.results | length > 0 }}"
  changed_when: not manifest_installed

- block:

    - set_fact:
        satellite_manifest_copy: "{{ True if satellite_manifest_file else False }}"
        satellite_manifest_download: "{{ True if satellite_rhsm_user and satellite_rhsm_pass else False }}"

    - fail:
        msg: "You must define either satellite_manifest_file or satellite_rhsm_user and pass"
      when: not satellite_manifest_copy and not satellite_manifest_download

    - name: copy manifest
      copy:
          src: "{{ satellite_manifest_file }}"
          dest: "{{ satellite_manifest_file_dest }}"
      when: satellite_manifest_copy

    - block:
        - name: obtain owner list
          uri:
            url: "https://subscription.rhn.redhat.com/subscription/users/{{ satellite_rhsm_user }}/owners"
            user: "{{ satellite_rhsm_user }}"
            password: "{{ satellite_rhsm_pass }}"
            validate_certs: False
            return_content: yes
          register: manifest

        - name: obtain satellite consumers
          uri:
            url: "https://subscription.rhn.redhat.com/subscription/owners/{{ manifest.json[0].key }}/consumers?type=satellite&type=sam"
            user: "{{ satellite_rhsm_user }}"
            password: "{{ satellite_rhsm_pass }}"
            validate_certs: False
            return_content: yes
          register: manifest

        - debug:
            var: manifest

        - name: filter consumer for manifest
          set_fact:
            consumer: |
              {% for x in manifest.json %}
              {% if x.name == satellite_default_organization %}
              {{ x }}
              {% endif %}
              {% endfor %}

        - debug:
            var: consumer

        - name: download manifest
          uri:
            url: "https://subscription.rhn.redhat.com/subscription/consumers/{{ consumer.uuid }}/export"
            user: "{{ satellite_rhsm_user }}"
            password: "{{ satellite_rhsm_pass }}"
            validate_certs: False
            creates: "{{ satellite_manifest_file_dest }}"
            dest: "{{ satellite_manifest_file_dest }}"
            return_content: no

      when: not satellite_manifest_copy and satellite_manifest_download

  when: not manifest_installed

- name: upload manifest
  command: "/usr/bin/hammer --output json subscription upload --file {{ satellite_manifest_file_dest }} {{ ORG_ID }}"
  when: not manifest_installed

- name: grab manifest information
  command: "/usr/bin/hammer --output json subscription list {{ ORG_ID }}"
  register: hammer_output
  changed_when: hammer_output.stdout | from_json | length == 0

- include: satellite_helper_callsatellite.yml
  vars:
    call_name: manifest informatino
    call_api: "/katello/api/organizations/{{ org_id }}/subscriptions"

- name: show manifest information
  debug:
    # msg: "{{ manifest_info | to_json }}"
    var: manifest_info
  vars:
    manifest_info: >-
      [
        {% for s in call_output.json.results %}
        {{ dict(name=s.name, quantity=s.quantity, support=s.support_level) | to_json }},
        {% endfor %}
        ]
