# vim: sw=2 ai ts=2 expandtab
---

- name: assign_facts - authorized_ssh_keys - look up from local user if needed
  set_fact:
    authorized_ssh_keys: "- {{ lookup('file', '~/.ssh/id_rsa.pub') }}"
  when: |
    vms_clean is not defined and (authorized_ssh_keys|default("")).strip() == ""
  run_once: True

- name: assign_facts - network interfaces - if ip is defined, reset nics list
  set_fact:
    vm_nics: []
    vm_cloud_init_nics: []
  when: ip is defined and ip

- name: assign_facts - network interfaces - append nics to arrays
  set_fact:
    vm_nics: "{{ vm_nics + [ dict(name=ii[0], profile_name=ii[0]) ] }}"
    vm_cloud_init_nics: |
      {{ vm_cloud_init_nics + [
        dict( 
          ifname=ii[1],
          ip=ii[2] | ipaddr('host'),
          gw=ii[2] | ipaddr('subnet') | ipaddr(gw | default(1)) | ipaddr('address') )
          ] }}
  with_items: "{{ (ip | default('')).split(',') }}"
  when: item and ii
  vars:
    ii: "{{ item.split(':') }}"

- name: assign_facts - cloud_init - create if needed
  set_fact:
    vm_cloud_init: |
      {
        "host_name": "{{ inventory_hostname if domain_name is not defined else inventory_hostname + '.' + domain_name }}",
        "user_name": "{{ ansible_user }}",
        "root_password": "{{ pw }}",
        {% if vm_cloud_init_nics %}
        "nic_ip_address": "{{ vm_cloud_init_nics.0.ip | ipaddr('address') }}",
        "nic_netmask": "{{ vm_cloud_init_nics.0.ip | ipaddr('netmask') }}",
        "nic_gateway": "{{ vm_cloud_init_nics.0.gw }}",
        "nic_name": "{{ vm_cloud_init_nics.0.ifname }}",
        "nic_on_boot": true,
        "nic_boot_protocol": "STATIC",
        {% endif %}
        {% if dns_servers | default('') %}
        "dns_servers": "{{ dns_servers }}",
        {% endif %}
        {% if dns_search | default('') %}
        "dns_search": "{{ dns_search }}",
        {% endif %}
        "regenerate_ssh_keys": true,
        "authorized_ssh_keys": "{{ authorized_ssh_keys }}",
      }
  when: use_cloud_init and vm_cloud_init_nics is defined and vm_cloud_init_nics
  vars:
    pw: "{{ user_password if user_password | default('')  else ( 'redhat123 ' + range(500,1000)|random|string) | hash( 'sha1') }}"

- name: assign_facts - cloud_init - assign run_cmd to cloud_init if needed
  set_fact:
    vm_cloud_init: |
      {{ dict(
        vm_cloud_init.items() +
        vm_cloud_init_runcmd.items()) }}
  when: use_cloud_init and vm_cloud_init and vm_cloud_init.root_password is defined
  vars:
    vm_cloud_init_runcmd:
      custom_script: |
        runcmd:
          - useradd demo
          - passwd demo --stdin <<< "{{ vm_cloud_init.root_password }}"
          - ifdown eth0
          - ifup eth0
        {% if dns_servers | default('') and dns_search | default('') %}
          - nmcli c modify "System eth0" connection.id eth0 ipv4.dns "{{ dns_servers }}" ipv4.dns-search "{{ dns_search }}"
          - ifdown eth0
          - ifup eth0
        {% endif %}
          - sed -i '/^datasource_list: /d' /etc/cloud/cloud.cfg; echo 'datasource_list: ["NoCloud", "ConfigDrive"]' >> /etc/cloud/cloud.cfg
          - echo "Updated with Cloud-Init" >> /etc/issue
          - sync
